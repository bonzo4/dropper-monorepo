create table "public"."giveaway_stats" (
    "giveaway_id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "total_views" bigint not null default '0'::bigint,
    "total_entries" bigint not null default '0'::bigint,
    "total_link_clicks" bigint not null default '0'::bigint,
    "period_views" bigint not null default '0'::bigint,
    "period_entries" bigint not null default '0'::bigint,
    "period_link_clicks" bigint not null default '0'::bigint
);


alter table "public"."giveaway_stats" enable row level security;

CREATE UNIQUE INDEX giveaway_stats_pkey1 ON public.giveaway_stats USING btree (giveaway_id);

alter table "public"."giveaway_stats" add constraint "giveaway_stats_pkey1" PRIMARY KEY using index "giveaway_stats_pkey1";

alter table "public"."giveaway_stats" add constraint "giveaway_stats_giveaway_id_fkey" FOREIGN KEY (giveaway_id) REFERENCES giveaways(id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."giveaway_stats" validate constraint "giveaway_stats_giveaway_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_user_giveaway_stats()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
    INSERT INTO public.user_giveaway_stats (user_id)
    VALUES (NEW.id);
    RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.create_giveaway_stats()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.giveaway_stats (giveaway_id) values (new.id);
  return new;
end$function$
;

INSERT INTO public.giveaway_stats (giveaway_id)
SELECT id FROM public.giveaways;

CREATE OR REPLACE FUNCTION public.update_user_enter_giveaway_stats()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
    -- Increment the giveaways_created count for the user
    UPDATE public.user_giveaway_stats
    SET giveaways_entered = giveaways_entered + 1
    WHERE user_id = NEW.user_id;
    INSERT into public.user_activities (user_id, activity, points)
    values (new.user_id, 'Giveaway entered.', 20);
    UPDATE public.giveaways
    SET entries = entries + 1
    WHERE id = NEW.giveaway_id;
    UPDATE public.giveaways_stats
    SET total_entries = total_entries + 1
    WHERE giveaway_id = NEW.giveaway_id;
    RETURN NEW;
END;$function$
;

grant delete on table "public"."giveaway_stats" to "anon";

grant insert on table "public"."giveaway_stats" to "anon";

grant references on table "public"."giveaway_stats" to "anon";

grant select on table "public"."giveaway_stats" to "anon";

grant trigger on table "public"."giveaway_stats" to "anon";

grant truncate on table "public"."giveaway_stats" to "anon";

grant update on table "public"."giveaway_stats" to "anon";

grant delete on table "public"."giveaway_stats" to "authenticated";

grant insert on table "public"."giveaway_stats" to "authenticated";

grant references on table "public"."giveaway_stats" to "authenticated";

grant select on table "public"."giveaway_stats" to "authenticated";

grant trigger on table "public"."giveaway_stats" to "authenticated";

grant truncate on table "public"."giveaway_stats" to "authenticated";

grant update on table "public"."giveaway_stats" to "authenticated";

grant delete on table "public"."giveaway_stats" to "service_role";

grant insert on table "public"."giveaway_stats" to "service_role";

grant references on table "public"."giveaway_stats" to "service_role";

grant select on table "public"."giveaway_stats" to "service_role";

grant trigger on table "public"."giveaway_stats" to "service_role";

grant truncate on table "public"."giveaway_stats" to "service_role";

grant update on table "public"."giveaway_stats" to "service_role";

CREATE TRIGGER after_giveaway_create AFTER INSERT ON public.giveaways FOR EACH ROW EXECUTE FUNCTION create_giveaway_stats();


