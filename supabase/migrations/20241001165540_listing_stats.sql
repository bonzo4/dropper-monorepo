drop policy "Enable insert for users based on user_id" on "public"."listing_comments";

drop policy "Enable read access for all users" on "public"."listing_comments";

create table "public"."listing_stats" (
    "listing_id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "views" bigint not null default '0'::bigint,
    "comments" bigint not null default '0'::bigint,
    "bumps" bigint not null default '0'::bigint
);


alter table "public"."listing_stats" enable row level security;

CREATE UNIQUE INDEX listing_stats_pkey ON public.listing_stats USING btree (listing_id);

alter table "public"."listing_stats" add constraint "listing_stats_pkey" PRIMARY KEY using index "listing_stats_pkey";

alter table "public"."listing_stats" add constraint "listing_stats_listing_id_fkey" FOREIGN KEY (listing_id) REFERENCES listings(id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."listing_stats" validate constraint "listing_stats_listing_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_listing_stats()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.listing_stats (listing_id) values (new.id);
end$function$
;

CREATE OR REPLACE FUNCTION public.update_listing_bump_statsa()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  update public.listing_stats set bumps = bumps + 1 where listing_id = new.id;
end$function$
;

CREATE OR REPLACE FUNCTION public.update_listing_comment_stats()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  update public.listing_stats set comments = comments + 1 where listing_id = new.id;
end$function$
;

grant delete on table "public"."listing_stats" to "anon";

grant insert on table "public"."listing_stats" to "anon";

grant references on table "public"."listing_stats" to "anon";

grant select on table "public"."listing_stats" to "anon";

grant trigger on table "public"."listing_stats" to "anon";

grant truncate on table "public"."listing_stats" to "anon";

grant update on table "public"."listing_stats" to "anon";

grant delete on table "public"."listing_stats" to "authenticated";

grant insert on table "public"."listing_stats" to "authenticated";

grant references on table "public"."listing_stats" to "authenticated";

grant select on table "public"."listing_stats" to "authenticated";

grant trigger on table "public"."listing_stats" to "authenticated";

grant truncate on table "public"."listing_stats" to "authenticated";

grant update on table "public"."listing_stats" to "authenticated";

grant delete on table "public"."listing_stats" to "service_role";

grant insert on table "public"."listing_stats" to "service_role";

grant references on table "public"."listing_stats" to "service_role";

grant select on table "public"."listing_stats" to "service_role";

grant trigger on table "public"."listing_stats" to "service_role";

grant truncate on table "public"."listing_stats" to "service_role";

grant update on table "public"."listing_stats" to "service_role";

create policy "Enable read access for all users"
on "public"."listing_stats"
as permissive
for select
to public
using (true);


create policy "Enable insert for users based on user_id"
on "public"."listing_comments"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."listing_comments"
as permissive
for select
to authenticated
using (true);


CREATE TRIGGER on_listing_bump_create AFTER INSERT ON public.listing_bumps FOR EACH ROW EXECUTE FUNCTION update_listing_bump_statsa();

CREATE TRIGGER on_listing_comments_create AFTER INSERT ON public.listing_comments FOR EACH ROW EXECUTE FUNCTION update_listing_comment_stats();


insert into public.listing_stats (listing_id) select id from public.listings;