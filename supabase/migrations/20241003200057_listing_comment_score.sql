drop policy "Enable read access for all users" on "public"."listing_comments";

create table "public"."listing_comment_votes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "comment_id" bigint not null,
    "user_id" uuid not null,
    "is_upvote" boolean not null
);


alter table "public"."listing_comment_votes" enable row level security;

alter table "public"."listing_comments" add column "score" bigint not null default '0'::bigint;

CREATE UNIQUE INDEX listing_comment_votes_pkey ON public.listing_comment_votes USING btree (id);

alter table "public"."listing_comment_votes" add constraint "listing_comment_votes_pkey" PRIMARY KEY using index "listing_comment_votes_pkey";

alter table "public"."listing_comment_votes" add constraint "listing_comment_votes_comment_id_fkey" FOREIGN KEY (comment_id) REFERENCES listing_comments(id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."listing_comment_votes" validate constraint "listing_comment_votes_comment_id_fkey";

alter table "public"."listing_comment_votes" add constraint "listing_comment_votes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."listing_comment_votes" validate constraint "listing_comment_votes_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.update_listing_comment_score()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    IF NEW.is_upvote THEN
        UPDATE listing_comments
        SET score = score + 1
        WHERE id = NEW.comment_id;  -- Assuming there is a comment_id in listing_comment_votes
    ELSE
        UPDATE listing_comments
        SET score = score - 1
        WHERE id = NEW.comment_id;  -- Assuming there is a comment_id in listing_comment_votes
    END IF;
    RETURN NEW;
END;
$function$
;

grant delete on table "public"."listing_comment_votes" to "anon";

grant insert on table "public"."listing_comment_votes" to "anon";

grant references on table "public"."listing_comment_votes" to "anon";

grant select on table "public"."listing_comment_votes" to "anon";

grant trigger on table "public"."listing_comment_votes" to "anon";

grant truncate on table "public"."listing_comment_votes" to "anon";

grant update on table "public"."listing_comment_votes" to "anon";

grant delete on table "public"."listing_comment_votes" to "authenticated";

grant insert on table "public"."listing_comment_votes" to "authenticated";

grant references on table "public"."listing_comment_votes" to "authenticated";

grant select on table "public"."listing_comment_votes" to "authenticated";

grant trigger on table "public"."listing_comment_votes" to "authenticated";

grant truncate on table "public"."listing_comment_votes" to "authenticated";

grant update on table "public"."listing_comment_votes" to "authenticated";

grant delete on table "public"."listing_comment_votes" to "service_role";

grant insert on table "public"."listing_comment_votes" to "service_role";

grant references on table "public"."listing_comment_votes" to "service_role";

grant select on table "public"."listing_comment_votes" to "service_role";

grant trigger on table "public"."listing_comment_votes" to "service_role";

grant truncate on table "public"."listing_comment_votes" to "service_role";

grant update on table "public"."listing_comment_votes" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."listing_comment_votes"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read for users based on user_id"
on "public"."listing_comment_votes"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."listing_comments"
as permissive
for select
to public
using (true);


CREATE TRIGGER trigger_update_listing_comment_score AFTER INSERT ON public.listing_comment_votes FOR EACH ROW EXECUTE FUNCTION update_listing_comment_score();


