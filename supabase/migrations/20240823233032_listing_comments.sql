create table "public"."listing_comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "listing_id" bigint not null,
    "content" text not null,
    "user_id" uuid default gen_random_uuid(),
    "wallet_address" text
);


alter table "public"."listing_comments" enable row level security;

CREATE UNIQUE INDEX listing_comments_pkey ON public.listing_comments USING btree (id);

alter table "public"."listing_comments" add constraint "listing_comments_pkey" PRIMARY KEY using index "listing_comments_pkey";

alter table "public"."listing_comments" add constraint "listing_comments_listing_id_fkey" FOREIGN KEY (listing_id) REFERENCES listings(id) ON UPDATE RESTRICT ON DELETE CASCADE not valid;

alter table "public"."listing_comments" validate constraint "listing_comments_listing_id_fkey";

alter table "public"."listing_comments" add constraint "listing_comments_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE RESTRICT ON DELETE SET NULL not valid;

alter table "public"."listing_comments" validate constraint "listing_comments_user_id_fkey";

grant delete on table "public"."listing_comments" to "anon";

grant insert on table "public"."listing_comments" to "anon";

grant references on table "public"."listing_comments" to "anon";

grant select on table "public"."listing_comments" to "anon";

grant trigger on table "public"."listing_comments" to "anon";

grant truncate on table "public"."listing_comments" to "anon";

grant update on table "public"."listing_comments" to "anon";

grant delete on table "public"."listing_comments" to "authenticated";

grant insert on table "public"."listing_comments" to "authenticated";

grant references on table "public"."listing_comments" to "authenticated";

grant select on table "public"."listing_comments" to "authenticated";

grant trigger on table "public"."listing_comments" to "authenticated";

grant truncate on table "public"."listing_comments" to "authenticated";

grant update on table "public"."listing_comments" to "authenticated";

grant delete on table "public"."listing_comments" to "service_role";

grant insert on table "public"."listing_comments" to "service_role";

grant references on table "public"."listing_comments" to "service_role";

grant select on table "public"."listing_comments" to "service_role";

grant trigger on table "public"."listing_comments" to "service_role";

grant truncate on table "public"."listing_comments" to "service_role";

grant update on table "public"."listing_comments" to "service_role";

create policy "Enable read access for all users"
on "public"."listing_comments"
as permissive
for select
to public
using (true);


create policy "enable insert for all"
on "public"."listing_comments"
as permissive
for insert
to anon, authenticated
with check (true);



